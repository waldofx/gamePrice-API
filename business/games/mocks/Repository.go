// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	games "gameprice-api/business/games"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: game, id
func (_m *Repository) Delete(game *games.Domain, id int) (string, error) {
	ret := _m.Called(game, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(*games.Domain, int) string); ok {
		r0 = rf(game, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*games.Domain, int) error); ok {
		r1 = rf(game, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]games.Domain, error) {
	ret := _m.Called()

	var r0 []games.Domain
	if rf, ok := ret.Get(0).(func() []games.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]games.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id int) (*games.Domain, error) {
	ret := _m.Called(id)

	var r0 *games.Domain
	if rf, ok := ret.Get(0).(func(int) *games.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*games.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: game
func (_m *Repository) Insert(game *games.Domain) (*games.Domain, error) {
	ret := _m.Called(game)

	var r0 *games.Domain
	if rf, ok := ret.Get(0).(func(*games.Domain) *games.Domain); ok {
		r0 = rf(game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*games.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*games.Domain) error); ok {
		r1 = rf(game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: game, id
func (_m *Repository) Update(game *games.Domain, id int) (*games.Domain, error) {
	ret := _m.Called(game, id)

	var r0 *games.Domain
	if rf, ok := ret.Get(0).(func(*games.Domain, int) *games.Domain); ok {
		r0 = rf(game, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*games.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*games.Domain, int) error); ok {
		r1 = rf(game, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
