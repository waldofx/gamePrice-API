// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	products "gameprice-api/business/products"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: product, id
func (_m *Repository) Delete(product *products.Domain, id int) (string, error) {
	ret := _m.Called(product, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(*products.Domain, int) string); ok {
		r0 = rf(product, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.Domain, int) error); ok {
		r1 = rf(product, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]products.Domain, error) {
	ret := _m.Called()

	var r0 []products.Domain
	if rf, ok := ret.Get(0).(func() []products.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id int) (*products.Domain, error) {
	ret := _m.Called(id)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(int) *products.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetProduct(_a0 int, _a1 int) (int, string, bool, string) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(int, int) bool); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 string
	if rf, ok := ret.Get(3).(func(int, int) string); ok {
		r3 = rf(_a0, _a1)
	} else {
		r3 = ret.Get(3).(string)
	}

	return r0, r1, r2, r3
}

// Insert provides a mock function with given fields: product
func (_m *Repository) Insert(product *products.Domain) (*products.Domain, error) {
	ret := _m.Called(product)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(*products.Domain) *products.Domain); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.Domain) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: product, id
func (_m *Repository) Update(product *products.Domain, id int) (*products.Domain, error) {
	ret := _m.Called(product, id)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(*products.Domain, int) *products.Domain); ok {
		r0 = rf(product, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.Domain, int) error); ok {
		r1 = rf(product, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
